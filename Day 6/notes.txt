**************************          Day - 6   ||  09/04/2024             **************************

###

    There is an Intermediate state between (1)callstack and browser knows as 
    Intermediate state -> (2)Event Loop
        (3)Callback  queue   -> low priority than microtask queue           setTimeout        (low priority task here)
        (4)microtask queue   -> high priority than Callback                 promises fetch    (high priority task here)

    

    when callback queue is empty(global execution context ends) then event loop puts remaining task to the callback queue to complete this  


        console.log("1");
        setTimeout(console.log("2"),0);
        console.log("3");

        1 -> 3 -> 2



###

    promise 
        A promise in JavaScript is a representation of a value that may be available now, in the future, or never. 
        It's like a placeholder for the result of an asynchronous operation, such as fetching data from a server or reading a file.

        Three states
            pendind
            fullfilled
            rejected


    why promises 
        ->we can't surely say that how much a task take time to complete their work 
            first order then payment

        function createOrder(x,fn){
            console.log(x);
            setTimeout(()=>{fn('123'),1000});
            setTimeout(()=>{fn('123'),2000});
        }

        function makeOrder(orderId){
            console.log(orderId)
        }

        createOrder('soap',makeOrder)





###

    -> map 
        used to traverse array and also for manipulating the array elements


            var arr = [1,2,3,4,5];
            arr.map((i)=>{
                console.log(i);
            })


            const sar=arr.map((i)=>{
                return i*10;
            })

            const sar = arr.map(i=>i*10);

            console.log(sar)



    -> filter
        used to return an array on a specefied condition 

         var arr = [1,2,5,8,0,5,7,6,9,8];

         var ans = arr.filter(i=>i<5);
            console.log(ans)


            var carPrice=[
                {"car":20000},
                {"car":60000},
                {"car":40000}
            ];

            var ans2 = carPrice.filter(i=>i.car>50000);
            console.log(ans2)




    -> reduce
        executes a reducer function for array element.
        returns a single value: the function's accumulated result.
        method does not execute the function for empty array elements.
        does not change the original array.

            var arr3=[1,2,3,4,5];
            var ans3 = arr3.reduce((num1,num2)=>{
                return num1+num2;
            })
            console.log(ans3)

            